use std::time::Duration;

use futures_util::StreamExt;
use hyper::Method;
use serde::Deserialize;
use tako::{
    extractors::{FromRequest, params::Params},
    middleware::{IntoMiddleware, Next, basic_auth, bearer_auth},
    responder::Responder,
    sse::Sse,
    state::get_state,
    types::Request,
};
use tokio_stream::wrappers::IntervalStream;

#[cfg(feature = "plugins")]
use tako::plugins::{
    compression::CompressionBuilder, cors::CorsPlugin, rate_limiter::RateLimiterBuilder,
};

#[derive(Clone, Default)]
pub struct AppState {
    pub count: u32,
}

pub async fn compression(mut _req: Request) -> impl Responder {
    "66125646655438184824034357503490176636099264991633465762201498014519123891859268733983653039388726432642995143358504569007771
    58598693402496866943402835041634570224118066330404568236483221494076492917098844866249914290879929866424562331479470484929530
    47981071980750177177087538144356263522627349597567256092672809627220185268573884037546233149941048425721886017397002493771038
    59789493522946388742872159309483907924798646897590296799087138432035293041592297258616156208443607672462374144231313952523825
    41214722436789521357506910806784385239131212667915286065697223577192349536631069819291852420161751071280762096700317526464632
    90928765621229518421461199169418959317189370377096223039048075197848769839858594855143546758093458201630388955491473164903161
    19029733685356457419092050823362333977133993758927393621966880365414110809808625711116204972494708604941468381375412202718800
    30757276143464395289644876909915866493212206250053550400385293673376701537468360960764657913786708380781323834871961191069325
    529433971642507566125646655438184824034357503490176636099264991633465762201498014519123891859268733983653039388726432642995143358504569007771
    58598693402496866943402835041634570224118066330404568236483221494076492917098844866249914290879929866424562331479470484929530
    47981071980750177177087538144356263522627349597567256092672809627220185268573884037546233149941048425721886017397002493771038
    59789493522946388742872159309483907924798646897590296799087138432035293041592297258616156208443607672462374144231313952523825
    41214722436789521357506910806784385239131212667915286065697223577192349536631069819291852420161751071280762096700317526464632
    90928765621229518421461199169418959317189370377096223039048075197848769839858594855143546758093458201630388955491473164903161
    19029733685356457419092050823362333977133993758927393621966880365414110809808625711116204972494708604941468381375412202718800
    30757276143464395289644876909915866493212206250053550400385293673376701537468360960764657913786708380781323834871961191069325
    529433971642507566125646655438184824034357503490176636099264991633465762201498014519123891859268733983653039388726432642995143358504569007771
    58598693402496866943402835041634570224118066330404568236483221494076492917098844866249914290879929866424562331479470484929530
    47981071980750177177087538144356263522627349597567256092672809627220185268573884037546233149941048425721886017397002493771038
    59789493522946388742872159309483907924798646897590296799087138432035293041592297258616156208443607672462374144231313952523825
    41214722436789521357506910806784385239131212667915286065697223577192349536631069819291852420161751071280762096700317526464632
    90928765621229518421461199169418959317189370377096223039048075197848769839858594855143546758093458201630388955491473164903161
    19029733685356457419092050823362333977133993758927393621966880365414110809808625711116204972494708604941468381375412202718800
    30757276143464395289644876909915866493212206250053550400385293673376701537468360960764657913786708380781323834871961191069325
    529433971642507566125646655438184824034357503490176636099264991633465762201498014519123891859268733983653039388726432642995143358504569007771
    58598693402496866943402835041634570224118066330404568236483221494076492917098844866249914290879929866424562331479470484929530
    47981071980750177177087538144356263522627349597567256092672809627220185268573884037546233149941048425721886017397002493771038
    59789493522946388742872159309483907924798646897590296799087138432035293041592297258616156208443607672462374144231313952523825
    41214722436789521357506910806784385239131212667915286065697223577192349536631069819291852420161751071280762096700317526464632
    90928765621229518421461199169418959317189370377096223039048075197848769839858594855143546758093458201630388955491473164903161
    19029733685356457419092050823362333977133993758927393621966880365414110809808625711116204972494708604941468381375412202718800
    30757276143464395289644876909915866493212206250053550400385293673376701537468360960764657913786708380781323834871961191069325
    529433971642507566125646655438184824034357503490176636099264991633465762201498014519123891859268733983653039388726432642995143358504569007771
    58598693402496866943402835041634570224118066330404568236483221494076492917098844866249914290879929866424562331479470484929530
    47981071980750177177087538144356263522627349597567256092672809627220185268573884037546233149941048425721886017397002493771038
    59789493522946388742872159309483907924798646897590296799087138432035293041592297258616156208443607672462374144231313952523825
    41214722436789521357506910806784385239131212667915286065697223577192349536631069819291852420161751071280762096700317526464632
    90928765621229518421461199169418959317189370377096223039048075197848769839858594855143546758093458201630388955491473164903161
    19029733685356457419092050823362333977133993758927393621966880365414110809808625711116204972494708604941468381375412202718800
    30757276143464395289644876909915866493212206250053550400385293673376701537468360960764657913786708380781323834871961191069325
    5294339716425075".into_response()
}

#[derive(Deserialize, Debug)]
pub struct Par {
    pub id: u32,
}

pub async fn user_created(mut req: Request) -> impl Responder {
    let _state = get_state::<AppState>("app_state").unwrap();
    // let Params(params) = Params::<Par>::from_request(&mut req).await.unwrap();
    // println!("User ID: {:?}", params);

    String::from("User created").into_response()
}

#[derive(Deserialize, Debug)]
pub struct UserCompanyParams {
    pub user_id: u32,
    pub company_id: u32,
}

pub async fn user_company(mut req: Request) -> impl Responder {
    let _state = get_state::<AppState>("app_state").unwrap();
    let Params(params) = Params::<UserCompanyParams>::from_request(&mut req)
        .await
        .unwrap();
    println!("User ID: {:?}", params);
    // let SimdJson(json) = SimdJson::<UserCompanyParams>::from_request(&mut req)
    //     .await
    //     .unwrap();
    // println!("User ID: {:?}", json);
    String::from("User created").into_response()
}

pub async fn sse_string_handler(_: Request) -> impl Responder {
    let stream = IntervalStream::new(tokio::time::interval(Duration::from_secs(1)))
        .map(|_| "Hello".to_string().into());

    Sse::new(stream)
}

pub async fn sse_bytes_handler(_: Request) -> impl Responder {
    let stream = IntervalStream::new(tokio::time::interval(Duration::from_secs(1)))
        .map(|_| bytes::Bytes::from("hello").into());

    Sse::new(stream)
}

pub async fn middleware1(req: Request, next: Next) -> impl Responder {
    println!("Middleware 1 executed");
    next.run(req).await.into_response()
}

pub async fn middleware2(req: Request, next: Next) -> impl Responder {
    println!("Middleware 2 executed");
    next.run(req).await.into_response()
}

pub async fn middleware3(req: Request, next: Next) -> impl Responder {
    println!("Middleware 3 executed");
    next.run(req).await.into_response()
}

pub async fn middleware4(req: Request, next: Next) -> impl Responder {
    println!("Middleware 4 executed");
    next.run(req).await.into_response()
}

#[tokio::main]
async fn main() {
    let listener = tokio::net::TcpListener::bind("127.0.0.1:8080")
        .await
        .unwrap();
    let mut r = tako::router::Router::new();
    r.state("app_state", AppState::default());

    let basic = basic_auth::BasicAuth::<(), fn(&str, &str) -> Option<()>>::single("admin", "pw")
        .realm("Admin Area")
        .into_middleware();

    let mut r2 = tako::router::Router::new();
    r2.route(Method::GET, "/compression", compression);
    r.merge(r2);

    r.route(Method::GET, "/compression", compression)
        .middleware(basic);

    let bearer =
        bearer_auth::BearerAuth::<(), fn(&str) -> Option<()>>::static_token("my-secret-token")
            .into_middleware();
    r.route_with_tsr(Method::POST, "/user", user_created);

    r.route_with_tsr(Method::POST, "/user/{id}", compression)
        .middleware(bearer);
    r.route_with_tsr(
        Method::POST,
        "/user/{user_id}/company/{company_id}",
        user_company,
    );
    r.route_with_tsr(Method::GET, "/sse/string", sse_string_handler);
    r.route_with_tsr(Method::GET, "/sse/bytes", sse_bytes_handler);

    r.middleware(middleware3).middleware(middleware4);

    #[cfg(feature = "plugins")]
    r.plugin(CorsPlugin::default());

    #[cfg(feature = "plugins")]
    r.plugin(
        RateLimiterBuilder::new()
            .burst_size(5)
            .per_second(20)
            .tick_secs(20)
            .build(),
    );

    #[cfg(feature = "plugins")]
    r.plugin(
        CompressionBuilder::new()
            .enable_gzip(true)
            .enable_brotli(true)
            //.enable_zstd(true)
            .min_size(1024)
            .build(),
    );

    #[cfg(not(feature = "tls"))]
    tako::serve(listener, r).await;

    #[cfg(feature = "tls")]
    tako::serve_tls(listener, r, None, None).await;
}
