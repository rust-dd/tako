/// This module provides the `Router` struct, which is responsible for managing routes,
/// dispatching requests, and applying middleware in the Tako framework.
use std::sync::Arc;

use dashmap::DashMap;
use hyper::Method;

use crate::{
    body::TakoBody,
    extractors::params::PathParams,
    handler::{BoxedHandler, Handler},
    responder::Responder,
    route::Route,
    state::set_state,
    types::{BoxedMiddleware, Request, Response},
};

/// The `Router` struct is responsible for managing the application's routes and middleware.
/// It provides methods to define routes, apply middleware, and dispatch incoming requests.
///
/// # Example
///
/// ```rust
/// use tako::router::Router;
/// use http::Method;
///
/// let mut router = Router::new();
/// router.route(Method::GET, "/example", |req| async move {
///     // Handle the request
///     Ok(req)
/// });
/// ```
pub struct Router {
    routes: DashMap<(Method, String), Arc<Route>>,
    middlewares: Vec<BoxedMiddleware>,
}

impl Router {
    /// Creates a new, empty `Router`.
    ///
    /// # Returns
    ///
    /// A new instance of `Router` with no routes or middleware.
    pub fn new() -> Self {
        Self {
            routes: DashMap::default(),
            middlewares: Vec::new(),
        }
    }

    /// Adds a new route to the router.
    ///
    /// # Arguments
    ///
    /// * `method` - The HTTP method for the route (e.g., GET, POST).
    /// * `path` - The path pattern for the route (e.g., "/example").
    /// * `handler` - The handler function to process requests matching this route.
    ///
    /// # Returns
    ///
    /// An `Arc` pointing to the created `Route`.
    ///
    /// # Example
    ///
    /// ```rust
    /// use tako::router::Router;
    /// use http::Method;
    ///
    /// let mut router = Router::new();
    /// router.route(Method::GET, "/example", |req| async move {
    ///     // Handle the request
    ///     Ok(req)
    /// });
    /// ```
    pub fn route<H>(&mut self, method: Method, path: &str, handler: H) -> Arc<Route>
    where
        H: Handler + Clone + 'static,
    {
        let route = Arc::new(Route::new(
            path.to_string(),
            method.clone(),
            BoxedHandler::new(handler),
            None,
        ));
        self.routes
            .insert((method.clone(), path.to_owned()), route.clone());
        route
    }

    /// Adds a new route with Trailing Slash Redirection (TSR) enabled.
    ///
    /// TSR ensures that requests to paths with or without a trailing slash are redirected
    /// to the canonical version of the path.
    ///
    /// # Arguments
    ///
    /// * `method` - The HTTP method for the route (e.g., GET, POST).
    /// * `path` - The path pattern for the route (e.g., "/example").
    /// * `handler` - The handler function to process requests matching this route.
    ///
    /// # Returns
    ///
    /// An `Arc` pointing to the created `Route`.
    ///
    /// # Panics
    ///
    /// This method will panic if called with the root path ("/").
    pub fn route_with_tsr<H>(&mut self, method: Method, path: &str, handler: H) -> Arc<Route>
    where
        H: Handler + Clone + 'static,
    {
        if path == "/" {
            panic!("Cannot route with TSR for root path");
        }

        let route = Arc::new(Route::new(
            path.to_string(),
            method.clone(),
            BoxedHandler::new(handler),
            Some(true),
        ));
        self.routes
            .insert((method.clone(), path.to_owned()), route.clone());
        route
    }

    /// Dispatches an incoming request to the appropriate route handler.
    ///
    /// This method matches the request's method and path against the defined routes.
    /// If a matching route is found, its handler is invoked. Middleware is applied
    /// in the order it was added.
    ///
    /// # Arguments
    ///
    /// * `req` - The incoming HTTP request.
    ///
    /// # Returns
    ///
    /// A `Response` generated by the matched route handler or middleware.
    ///
    /// If no matching route is found, a 404 response is returned. If TSR is enabled
    /// for a route, a 307 redirect response is returned for paths with or without
    /// a trailing slash.
    pub async fn dispatch(&self, mut req: Request) -> Response {
        let method = req.method();
        let path = req.uri().path();

        for route in self.routes.iter() {
            if &route.method != method {
                continue;
            }

            if let Some(params) = route.match_path(path) {
                req.extensions_mut().insert(PathParams(params));

                let r_mws = route.middlewares.read().await;
                let mws = self.middlewares.iter().chain(r_mws.iter()).rev();

                for mw in mws {
                    match mw(req).await {
                        Ok(r) => req = r,
                        Err(resp) => return resp,
                    }
                }

                return route.handler.call(req).await;
            }
        }

        let tsr_path = if path.ends_with('/') {
            path.trim_end_matches('/').to_string()
        } else {
            format!("{}/", path)
        };

        for route in self.routes.iter() {
            if &route.method == method && route.tsr && route.match_path(&tsr_path).is_some() {
                return hyper::Response::builder()
                    .status(307)
                    .header("Location", tsr_path)
                    .body(TakoBody::empty())
                    .unwrap();
            }
        }

        hyper::Response::builder()
            .status(404)
            .body(TakoBody::empty())
            .unwrap()
    }

    /// Adds a global state value to the router.
    ///
    /// This method allows you to store shared state that can be accessed by handlers
    /// and middleware.
    ///
    /// # Arguments
    ///
    /// * `key` - A unique key to identify the state value.
    /// * `value` - The state value to store.
    ///
    /// # Example
    ///
    /// ```rust
    /// use tako::router::Router;
    ///
    /// let mut router = Router::new();
    /// router.state("config", "example_value".to_string());
    /// ```
    pub fn state<T: Clone + Send + Sync + 'static>(&mut self, key: &str, value: T) {
        set_state(key, value);
    }

    /// Adds a middleware function to the router.
    ///
    /// Middleware functions are executed in the order they are added, and they can
    /// modify or reject requests before they reach the route handler.
    ///
    /// # Arguments
    ///
    /// * `f` - A middleware function that takes a `Request` and returns a `Future`
    ///         resolving to either a modified `Request` or a `Response`.
    ///
    /// # Example
    ///
    /// ```rust
    /// use tako::router::Router;
    /// use anyhow::Result;
    ///
    /// let mut router = Router::new();
    /// router.middleware(|req| async move {
    ///     println!("Incoming request: {:?}", req);
    ///     Ok(req)
    /// });
    /// ```
    pub fn middleware<F, Fut, R>(&mut self, f: F)
    where
        F: Fn(Request) -> Fut + Clone + Send + Sync + 'static,
        Fut: Future<Output = Result<Request, R>> + Send + 'static,
        R: Responder + Send + 'static,
    {
        let mw: BoxedMiddleware = Box::new(move |req: Request| {
            let f = f.clone();
            Box::pin(async move {
                match f(req).await {
                    Ok(r) => Ok(r),
                    Err(e) => Err(e.into_response()),
                }
            })
        });

        self.middlewares.push(mw);
    }
}
